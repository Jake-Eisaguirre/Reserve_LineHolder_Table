---
title: "Reserve_LineHolder_Table"
format: html
editor: source
---

## Packages
```{r}
# Ensure the 'librarian' package is installed and loaded
if (!require(librarian)) {
  install.packages("librarian")  # Install if not available
  library(librarian)  # Load the package
}

# Use librarian to manage and load packages
librarian::shelf(tidyverse, here, DBI, odbc)  # Load required packages


```

## DB Connection - Enterprise
```{r}

### Database Connection: Connect to `ENTERPRISE` database using Snowflake
tryCatch({
  db_connection <- DBI::dbConnect(odbc::odbc(),
                                  Driver = "SnowflakeDSIIDriver",
                                  Server = "hawaiianair.west-us-2.azure.snowflakecomputing.com",
                                  WAREHOUSE = "DATA_LAKE_READER",
                                  Database = "ENTERPRISE",
                                  UID = "jacob.eisaguirre@hawaiianair.com",  # Replace Sys.getenv("UID") with your email
                                  authenticator = "externalbrowser")
  print("Database Connected!")  # Success message
}, error = function(cond) {
  print("Unable to connect to Database.")  # Error handling
})

# Set the schema for the session
dbExecute(db_connection, "USE SCHEMA CREW_ANALYTICS")


current_date <- Sys.Date()  # Today's date
week_prior <- current_date - 3  # Date three days prior
week_prior_pairing_date <- current_date - 7  # Date seven days prior
previous_bid_period <- substr(as.character((current_date)), 1, 7)

raw_date <- Sys.Date()
```

## MS Schedule
```{r}


# Query master schedule data and clean it
q_master_history <- paste0("SELECT * FROM CT_MASTER_HISTORY WHERE PAIRING_DATE BETWEEN '", week_prior, "' AND '", current_date, "';")
view_masterhistory <- dbGetQuery(db_connection, q_master_history)


```

## Clean MH
```{r}

clean_mh <- view_masterhistory %>% 
  select(CREW_INDICATOR, PAIRING_POSITION, CREW_ID, PAIRING_DATE, BASE, BID_PERIOD, LINE_TYPE, UPDATE_DATE, UPDATE_TIME) %>% 
  mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep=" ")) %>% 
  group_by(CREW_INDICATOR, PAIRING_POSITION, CREW_ID, PAIRING_DATE) %>%
  filter(update_dt == max(update_dt),
         LINE_TYPE == "B") %>% 
  filter(!CREW_ID %in% c("6", "8", "10", "11", "35", "21", "7", "18", "1", "2", "3", "4", 
                         "5", "9", "12", "13", "14", "15", "17", "19", "20", "25", "31", 
                         "32", "33", "34", "36", "37")) %>% 
  filter(!BASE == "CVG") %>% 
  mutate(PAIRING_POSITION = if_else(PAIRING_POSITION == "RO", "FO", PAIRING_POSITION),
         PAIRING_POSITION = if_else(CREW_INDICATOR == "FA", "FA", PAIRING_POSITION)) %>% 
  drop_na() %>% 
  ungroup()


```

```{r}
q_master_sched <- paste0("select CREW_ID, EQUIPMENT, PAIRING_POSITION, BID_DATE as BID_PERIOD
                   from CT_MASTER_SCHEDULE WHERE BID_DATE = '", previous_bid_period, "';")


raw_ms <- dbGetQuery(db_connection, q_master_sched)
```

## Clean MS
```{r}
clean_ms <- raw_ms%>% 
  filter(!CREW_ID %in% c("6", "8", "10", "11", "35", "21", "7", "18", "1", "2", "3", "4", 
                         "5", "9", "12", "13", "14", "15", "17", "19", "20", "25", "31", 
                         "32", "33", "34", "36", "37")) %>% 
  group_by(PAIRING_POSITION, CREW_ID, BID_PERIOD) %>% 
  mutate(temp_id = cur_group_id()) %>% 
  filter(!duplicated(temp_id)) %>% 
  filter(!EQUIPMENT == "33Y") %>% 
  mutate(EQUIPMENT = if_else(PAIRING_POSITION == "FA", NA, EQUIPMENT))



```

```{r}
### Database Connection: Connect to `ENTERPRISE` database using Snowflake
tryCatch({
  db_connection_pg <- DBI::dbConnect(odbc::odbc(),
                                  Driver = "SnowflakeDSIIDriver",
                                  Server = "hawaiianair.west-us-2.azure.snowflakecomputing.com",
                                  WAREHOUSE = "DATA_LAKE_READER",
                                  Database = "PLAYGROUND",
                                  UID = "jacob.eisaguirre@hawaiianair.com",  # Replace Sys.getenv("UID") with your email
                                  authenticator = "externalbrowser")
  print("Database Connected!")  # Success message
}, error = function(cond) {
  print("Unable to connect to Database.")  # Error handling
})

# Set the schema for the session
dbExecute(db_connection_pg, "USE SCHEMA CREW_ANALYTICS")
```

## AA Reserve Utl 
```{r}

res_utl_q <- paste("select * from AA_RESERVE_UTILIZATION WHERE PAIRING_DATE BETWEEN '", week_prior, "' AND '", current_date, "';")

raw_reserve_utl <- dbGetQuery(db_connection_pg, res_utl_q)

clean_reserve_utl <- raw_reserve_utl %>% 
  select(PAIRING_POSITION, PAIRING_DATE, BASE, RLV_SCR, EQUIPMENT) %>% 
  rename(R = RLV_SCR) %>% 
  mutate(BASE = if_else(PAIRING_POSITION %in% c("CA", "FO") & EQUIPMENT == "717", "HAL", BASE),
         BASE = if_else(PAIRING_POSITION %in% c("CA", "FO") & !EQUIPMENT == "717", "HNL", BASE)) %>% 
  select(!EQUIPMENT)

```


## Gold Tier
```{r}

gold_ms <- clean_mh %>% 
  inner_join(clean_ms, by = c("CREW_ID", "BID_PERIOD", "PAIRING_POSITION")) %>% 
  group_by(PAIRING_POSITION, PAIRING_DATE, BASE, EQUIPMENT, LINE_TYPE) %>% 
  reframe(DAILY_COUNT = n()) %>% 
  pivot_wider(names_from = LINE_TYPE, values_from = DAILY_COUNT) %>% 
  inner_join(clean_reserve_utl, by = c("PAIRING_POSITION", "PAIRING_DATE", "BASE")) %>% 
  mutate(reserve_lineholder_perc = round((R/B)*100, 2))

```

